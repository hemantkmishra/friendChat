{
  "_from": "await-to-js@^2.1.1",
  "_id": "await-to-js@2.1.1",
  "_inBundle": false,
  "_integrity": "sha512-CHBC6gQGCIzjZ09tJ+XmpQoZOn4GdWePB4qUweCaKNJ0D3f115YdhmYVTZ4rMVpiJ3cFzZcTYK1VMYEICV4YXw==",
  "_location": "/await-to-js",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "await-to-js",
    "fetchSpec": "^2.1.1",
    "name": "await-to-js",
    "raw": "await-to-js@^2.1.1",
    "rawSpec": "^2.1.1",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/await-to-js/-/await-to-js-2.1.1.tgz",
  "_shasum": "c2093cd5a386f2bb945d79b292817bbc3f41b31b",
  "_shrinkwrap": null,
  "_spec": "await-to-js@^2.1.1",
  "_where": "/home/ronins/projects/friendchat/friendChat",
  "author": {
    "email": "dima@grossman.io",
    "name": "Dima Grossman"
  },
  "bugs": {
    "url": "https://github.com/scopsy/await-to-js/issues"
  },
  "bundleDependencies": false,
  "config": {
    "commitizen": {
      "path": "node_modules/cz-conventional-changelog"
    },
    "validate-commit-msg": {
      "helpMessage": "Use \"npm run commit\" instead, we use conventional-changelog format :) (https://github.com/commitizen/cz-cli)",
      "types": "conventional-commit-types"
    }
  },
  "dependencies": {},
  "deprecated": false,
  "description": "Async/await wrapper for easy error handling in js",
  "devDependencies": {
    "@types/jest": "^21.1.0",
    "@types/node": "^8.0.0",
    "colors": "^1.1.2",
    "commitizen": "^2.9.6",
    "coveralls": "^2.13.1",
    "cross-env": "^5.0.1",
    "cz-conventional-changelog": "^2.0.0",
    "husky": "^0.14.0",
    "jest": "^21.0.0",
    "lint-staged": "^4.0.0",
    "lodash.camelcase": "^4.3.0",
    "prompt": "^1.0.0",
    "replace-in-file": "^3.0.0-beta.2",
    "rimraf": "^2.6.1",
    "rollup": "^0.50.0",
    "rollup-plugin-commonjs": "^8.0.2",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-plugin-sourcemaps": "^0.4.2",
    "semantic-release": "^8.0.0",
    "ts-jest": "^21.0.0",
    "ts-node": "^3.0.6",
    "tslint": "^5.4.3",
    "tslint-config-standard": "^6.0.0",
    "typedoc": "^0.8.0",
    "typescript": "^2.3.4",
    "validate-commit-msg": "^2.12.2"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "files": [
    "dist"
  ],
  "homepage": "https://github.com/scopsy/await-to-js#readme",
  "jest": {
    "coveragePathIgnorePatterns": [
      "/node_modules/",
      "/test/"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 90,
        "functions": 95,
        "lines": 95,
        "statements": 95
      }
    },
    "moduleFileExtensions": [
      "js",
      "ts",
      "tsx"
    ],
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
    "transform": {
      ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
    }
  },
  "keywords": [
    "async",
    "async await",
    "await",
    "node"
  ],
  "license": "MIT",
  "lint-staged": {
    "{src,test}/**/*.ts": [
      "git add"
    ]
  },
  "main": "dist/await-to-js.umd.js",
  "module": "dist/await-to-js.es5.js",
  "name": "await-to-js",
  "optionalDependencies": {},
  "readme": "# await-to-js\n\n[![NPM version][npm-image]][npm-url]\n[![Downloads][download-badge]][npm-url]\n\n> Async await wrapper for easy error handling\n\n## Pre-requisites\nYou need to use Node 7.6 (or later) or an ES7 transpiler in order to use async/await functionality.\nYou can use babel or typescript for that.\n\n## Install\n\n```sh\nnpm i await-to-js --save\n```\n\n## Usage\n\n```js\nimport to from 'await-to-js';\n// If you use CommonJS (i.e NodeJS environment), it should be:\n// const to = require('await-to-js').default;\n\nasync function asyncTaskWithCb(cb) {\n     let err, user, savedTask, notification;\n\n     [ err, user ] = await to(UserModel.findById(1));\n     if(!user) return cb('No user found');\n\n     [ err, savedTask ] = await to(TaskModel({userId: user.id, name: 'Demo Task'}));\n     if(err) return cb('Error occurred while saving task');\n\n    if(user.notificationsEnabled) {\n       [ err ] = await to(NotificationService.sendNotification(user.id, 'Task Created'));\n       if(err) return cb('Error while sending notification');\n    }\n\n    if(savedTask.assignedUser.id !== user.id) {\n       [ err, notification ] = await to(NotificationService.sendNotification(savedTask.assignedUser.id, 'Task was created for you'));\n       if(err) return cb('Error while sending notification');\n    }\n\n    cb(null, savedTask);\n}\n\nasync function asyncFunctionWithThrow() {\n  const [err, user] = await to(UserModel.findById(1));\n  if (!user) throw new Error('User not found');\n  \n}\n```\n\n## TypeScript usage\n```javascript\ninterface ServerResponse {\n  test: number;\n}\n\nconst p = Promise.resolve({test: 123});\n\nconst [err, data] = await to<ServerResponse>(p);\nconsole.log(data.test);\n```\n\n## License\n\nMIT Â© [Dima Grossman](http://blog.grossman.io) && Tomer Barnea\n\n[npm-url]: https://npmjs.org/package/await-to-js\n[npm-image]: https://img.shields.io/npm/v/await-to-js.svg?style=flat-square\n\n[travis-url]: https://travis-ci.org/scopsy/await-to-js\n[travis-image]: https://img.shields.io/travis/scopsy/await-to-js.svg?style=flat-square\n\n[coveralls-url]: https://coveralls.io/r/scopsy/await-to-js\n[coveralls-image]: https://img.shields.io/coveralls/scopsy/await-to-js.svg?style=flat-square\n\n[depstat-url]: https://david-dm.org/scopsy/await-to-js\n[depstat-image]: https://david-dm.org/scopsy/await-to-js.svg?style=flat-square\n\n[download-badge]: http://img.shields.io/npm/dm/await-to-js.svg?style=flat-square\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/scopsy/await-to-js.git"
  },
  "scripts": {
    "build": "tsc && rollup -c && rimraf compiled && typedoc --out dist/docs --target es6 --theme minimal src",
    "commit": "git-cz",
    "deploy-docs": "ts-node tools/gh-pages-publish",
    "lint": "tslint -t codeFrame 'src/**/*.ts' 'test/**/*.ts'",
    "prebuild": "rimraf dist",
    "precommit": "lint-staged",
    "report-coverage": "cat ./coverage/lcov.info | coveralls",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "semantic-release-prepare": "ts-node tools/semantic-release-prepare",
    "start": "tsc -w & rollup -c -w",
    "test": "jest",
    "test:prod": "npm run lint && npm run test -- --coverage --no-cache",
    "test:watch": "jest --watch"
  },
  "typings": "dist/types/await-to-js.d.ts",
  "version": "2.1.1"
}
